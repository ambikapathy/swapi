{"version":3,"sources":["context/auth.js","components/login.js","components/search/planets.js","components/logout.js","components/search/index.js","App.js","serviceWorker.js","index.js","assets/star-wars-logo.jpg"],"names":["AuthContext","createContext","useAuth","useContext","useStyles","makeStyles","media","height","Login","classes","useState","isLoggedIn","setLoggedIn","isAuthenticated","setIsError","userName","setUserName","password","setPassword","setAuthTokens","to","Box","display","justifyContent","alignItems","minHeight","Card","CardActionArea","CardMedia","className","image","swlogo","title","CardContent","Typography","gutterBottom","variant","component","color","FormGroup","TextField","label","value","onChange","e","target","type","Button","onClick","axios","get","then","response","swObject","data","results","filter","el","name","birth_year","status","length","catch","root","minWidth","maxWidth","margin","fontSize","Planets","props","planets","map","planet","population","style","Logout","localStorage","clear","window","location","href","searchBox","Search","searchTerm","setSearchTerm","searchObjects","setSearchObjects","isError","isEmpty","setIsEmpty","lpVariant","setLPVariant","makeSearsh","AppBar","position","Toolbar","flex","LinearProgress","InputProps","input","m","App","existingTokens","JSON","parse","getItem","authTokens","Provider","setItem","stringify","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.863455d6.chunk.js","sourcesContent":["import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}","import React, { useState } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { FormGroup, TextField, Button } from '@material-ui/core';\r\nimport { Box, Card, CardActionArea, CardContent, CardMedia, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport swlogo from '../assets/star-wars-logo.jpg'\r\nimport { useAuth } from \"../context/auth\";\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles({\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\nfunction Login() {\r\n    const classes = useStyles();\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n    const isAuthenticated = useAuth();\r\n    const [isError, setIsError] = useState(false);\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const { setAuthTokens } = useAuth();\r\n\r\n    function makeLogin() {\r\n        axios.get(\"https://swapi.dev/api/people/?name=\" + userName + \"&birth_date=\" + password).then(response => {\r\n            let swObject = response.data.results.filter(function (el) { return el.name == \"Luke Skywalker\" && el.birth_year == \"19BBY\" });\r\n            if (response.status === 200 && swObject.length > 0) {\r\n                setAuthTokens(swObject);\r\n                setLoggedIn(true);\r\n            } else {\r\n                setIsError(true);\r\n            }\r\n        }).catch(e => {\r\n            setIsError(true);\r\n        });\r\n    }\r\n\r\n    if (isLoggedIn && isAuthenticated) {\r\n        return <Redirect to=\"/search\" />;\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            minHeight=\"100vh\"\r\n        >\r\n            <Card>\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={swlogo}\r\n                        title=\"STAR WARS\"\r\n                    />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            Login\r\n                            </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n\r\n                            <FormGroup>\r\n                                <TextField label=\"Username\" value={userName}\r\n                                    onChange={e => {\r\n                                        setUserName(e.target.value);\r\n                                    }} />\r\n                                <TextField type=\"Password\" label=\"Password\" value={password} onChange={e => {\r\n                                    setPassword(e.target.value);\r\n                                }} />\r\n                                <Button onClick={makeLogin}>Enter</Button>\r\n                            </FormGroup>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card></Box>\r\n    )\r\n}\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ReactDOM from 'react-dom';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { FormGroup, TextField, Button } from '@material-ui/core';\r\nimport { Box, Card, CardActionArea, CardContent, CardMedia, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport swlogo from '../../assets/star-wars-logo.jpg'\r\nimport { useAuth } from \"../../context/auth\";\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        maxWidth: 375,\r\n        margin: 20\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n});\r\n\r\nfunction Planets(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        props.planets.map(planet => {\r\n            return (\r\n                <Card className={classes.root} variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                            population: {planet.population}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\" style={{ fontSize: {...planet.population / 9999}}}>\r\n                            {planet.name}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card >\r\n            )\r\n        })\r\n    )\r\n}\r\nexport default Planets;","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction Logout(props) {\r\n  function logOut() {\r\n    localStorage.clear();\r\n    window.location.href = '/';\r\n  }\r\n\r\n  return <Button onClick={logOut}>Log out</Button>;\r\n}\r\n\r\nexport default Logout;\r\n","import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Box,\r\n  Toolbar,\r\n  Button,\r\n  TextField,\r\n  LinearProgress,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useAuth } from \"../../context/auth\";\r\nimport axios from \"axios\";\r\nimport Planets from \"./planets\";\r\nimport Logout from \"../logout\";\r\n\r\nconst useStyles = makeStyles({\r\n  searchBox: {\r\n    height: 100,\r\n    fontSize: \"3em\",\r\n  },\r\n});\r\n\r\nfunction Search(props) {\r\n  const classes = useStyles();\r\n  const isLoggedIn = useAuth();\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchObjects, setSearchObjects] = useState();\r\n  const [isError, setIsError] = useState(false);\r\n  const [isEmpty, setIsEmpty] = useState(true);\r\n  const [lpVariant, setLPVariant] = useState(\"\");\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  function makeSearsh(searchTerm) {\r\n    axios\r\n      .get(\"https://swapi.dev/api/planets/?search=\" + searchTerm)\r\n      .then((response) => {\r\n        if (response.status === 200 && response.data.results.length > 0) {\r\n          setSearchObjects(response.data.results);\r\n          setSearchObjects(response.data.results);\r\n          setIsEmpty(false);\r\n          setLPVariant(\"determinate\");\r\n        } else {\r\n          setIsEmpty(true);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        setIsError(true);\r\n      });\r\n  }\r\n  //to make the first request\r\n  !lpVariant && makeSearsh(searchTerm);\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography type=\"title\" color=\"inherit\" style={{ flex: 1 }}>\r\n            Title\r\n          </Typography>\r\n          <div>\r\n            <Logout/>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <LinearProgress variant={lpVariant} value={100} />\r\n      <TextField\r\n        label=\"Search Planets\"\r\n        value={searchTerm}\r\n        onChange={(e) => {\r\n          setLPVariant(\"indeterminate\");\r\n          setSearchTerm(e.target.value);\r\n          makeSearsh(e.target.value);\r\n        }}\r\n        InputProps={{ classes: { input: classes.searchBox } }}\r\n      />\r\n      {isError && <h2>Error!</h2>}\r\n      {!isError && (\r\n        <p>\r\n          {isEmpty ? (\r\n            \"Zero Results.\"\r\n          ) : (\r\n            <Box component=\"span\" m={1}>\r\n              <Planets planets={searchObjects} />\r\n            </Box>\r\n          )}\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Link, Route, Redirect } from \"react-router-dom\";\nimport './App.css';\nimport { AuthContext } from \"./context/auth\";\nimport { useAuth } from \"./context/auth\";\nimport Login from './components/login';\nimport Search from './components/search';\n\nfunction App() {\n  const existingTokens = JSON.parse(localStorage.getItem(\"tokens\"));\n  const [authTokens, setAuthTokens] = useState(existingTokens);\n  \n  const setTokens = (data) => {\n    localStorage.setItem(\"tokens\", JSON.stringify(data));\n    setAuthTokens(data);\n  }\n\n  return (\n    <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\n      <Router>\n        <Route exact path=\"/\" component={Login} />\n        <Route path=\"/search\" component={Search} />\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.3cf5bb02.jpg\";"],"sourceRoot":""}